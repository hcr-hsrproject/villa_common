#!/usr/bin/env python

# Based on the teleop_twist_keyboard script from brown-ros-pkg
# Original Authors: Trevor Jay
# Original License: BSD
# See https://code.google.com/p/brown-ros-pkg/ for more details
from __future__ import print_function
import rospy

from geometry_msgs.msg import Twist
import controller_manager_msgs.srv
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from sensor_msgs.msg import JointState

import sys, select, termios, tty

msg = """
Reading from the keyboard and publishing to Twist!
---------------------------
Moving around:
   u    i    o
   j    k    l
        ,    

q/z : increase/decrease max speeds by 10%
w/x : increase/decrease only linear speed by 10%
e/c : increase/decrease only angular speed by 10%

u/o : forward and turn left/right
j/l : turn left/right
h/; : strafe left/right
,   : back

r/v : tilt head up/down
d/g : pan head left/right

[/] : open/close gripper
-/+ : lower/raise arm
9/0 : lower/raise arm flex joint

1   : move to go
2   : move to photo taking pose

anything else : stop

CTRL-C to quit
"""

armBindings = {
    '=': (1, 0),
    '-': (-1, 0),
    '0': (0, 1),
    '9': (0, -1)
}

moveBindings = {
    'i': (1, 0),
    'o': (1, -1),
    'j': (0, 1),
    'l': (0, -1),
    'u': (1, 1),
    ',': (-1, 0),
}

strafeBindings = {
    'h': (0, 1),
    ';': (0, -1)
}

headBindings = {
    'r': (0, 1),
    'v': (0, -1),
    'd': (1, 0),
    'g': (-1, 0)
}

handBindings = {
    '[': 1.1,
    ']': -1.1
}

speedBindings = {
    'q': (1.1, 1.1),
    'z': (.9, .9),
    'w': (1.1, 1),
    'x': (.9, 1),
    'e': (1, 1.1),
    'c': (1, .9),
}

# A keypress in Dvorak indicates what key in Qwerty?
dvorakTranslator = {'a': 'a',
                    'b': 'n',
                    'c': 'i',
                    'd': 'h',
                    'e': 'd',
                    'f': 'y',
                    'g': 'u',
                    'h': 'j',
                    'i': 'g',
                    'j': 'c',
                    'k': 'v',
                    'l': 'p',
                    'm': 'm',
                    'n': 'l',
                    'o': 's',
                    'p': 'r',
                    'q': 'x',
                    'r': 'o',
                    's': ';',
                    't': 'k',
                    'u': 'f',
                    'v': '.',
                    'w': ',',
                    'x': 'b',
                    'y': 't',
                    'z': '/',
                    ';': 'z',
                    ',': 'w',
                    '.': 'e',
                    '/': '[',
                    '\'': 'q',
                    '=': ']',
                    '[': '-',
                    ']': '='
                    }

go_pose = {"arm": [0, 0, -1.57, -1.57, 0], "head": [0, 0]}

# Body raised, head turned right, arm raised and pointed toward right. Wrist rotated floor parallel
look_right_photo_pose = {"arm": [0.30, -0.42, -1.55, -1.57, 2.05], "head": [-1.5, -0.40]}
look_right_from_above_photo_pose = {"arm": [0.60, -0.42, -1.55, -1.57, 2.05], "head": [-1.5, -0.9]}
look_ahead_photo_pose = {"arm": [0.00, 0.00, 0.00, -1.51, 1.60], "head": [0.0, 0.0]}

def getKey(translator=None):
    fd = sys.stdin.fileno()
    tty.setraw(fd)
    key = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, original_settings)
    key = key.lower()
    if translator is not None:
        key = translator.get(key, key)
    return key


def publish_base_velocity(x, y, th):
    twist = Twist()
    twist.linear.x = x
    twist.linear.y = y
    twist.linear.z = 0
    twist.angular.x = 0
    twist.angular.y = 0
    twist.angular.z = th
    velPub.publish(twist)


def publish_arm(lift, flex):
    traj = JointTrajectory()
    # This controller requires that all joints have values
    traj.joint_names = ["arm_lift_joint", "arm_flex_joint",
                        "arm_roll_joint", "wrist_flex_joint", "wrist_roll_joint"]
    p = JointTrajectoryPoint()
    current_positions = [latest_positions[name] for name in traj.joint_names]
    current_positions[0] = lift
    current_positions[1] = flex
    p.positions = current_positions
    p.velocities = [0, 0, 0, 0, 0]
    p.time_from_start = rospy.Time(3)
    traj.points = [p]

    armPub.publish(traj)


def publish_gripper(position):
    traj = JointTrajectory()
    traj.joint_names = ["hand_motor_joint"]
    p = JointTrajectoryPoint()
    p.positions = [position]
    p.velocities = [0]
    p.effort = [0.1]
    p.time_from_start = rospy.Time(3)
    traj.points = [p]

    gripperPub.publish(traj)


def publish_head(pan, tilt):
    jointTrajectory = JointTrajectory()
    jointTrajectory.joint_names = ["head_pan_joint", "head_tilt_joint"]

    point = JointTrajectoryPoint()
    point.positions = [pan, tilt]
    point.velocities = [0, 0]
    point.time_from_start = rospy.Duration(1)

    jointTrajectory.points.append(point)

    headPub.publish(jointTrajectory)


def move_to_pose(pose):
    traj = JointTrajectory()
    # This controller requires that all joints have values
    traj.joint_names = ["arm_lift_joint", "arm_flex_joint",
                        "arm_roll_joint", "wrist_flex_joint", "wrist_roll_joint"]
    p = JointTrajectoryPoint()
    p.positions = pose["arm"]
    p.velocities = [0, 0, 0, 0, 0]
    p.time_from_start = rospy.Time(3)
    traj.points = [p]
    publish_head(pose["head"][0], pose["head"][1])
    armPub.publish(traj)


def stop_all():
    publish_base_velocity(0, 0, 0)
    publish_head(latest_positions["head_pan_joint"], latest_positions["head_tilt_joint"])
    publish_arm(latest_positions["arm_lift_joint"], latest_positions["arm_flex_joint"])

latest_positions = None


def states_cb(msg):
    global latest_positions
    positions = {}
    for name, i in zip(msg.name, range(len(msg.name))):
        positions[name] = msg.position[i]
    latest_positions = positions


def vels(linear, angular):
    return "Linear speed %.2f\tAngular speed %.2f " % (linear, angular)


if __name__ == "__main__":
    original_settings = termios.tcgetattr(sys.stdin)
    rospy.init_node('teleop_twist_keyboard', anonymous=True)
    linear = 0.75
    angular = 0.75

    keyTranslator = None
    if len(sys.argv) == 2:
        if sys.argv[1] == "-d":
            keyTranslator = dvorakTranslator

    statesSub = rospy.Subscriber('/hsrb/joint_states', JointState, states_cb)
    velPub = rospy.Publisher('/hsrb/command_velocity', Twist, queue_size=1)
    armPub = rospy.Publisher('/hsrb/arm_trajectory_controller/command', JointTrajectory, queue_size=1)
    gripperPub = rospy.Publisher('/hsrb/gripper_controller/command', JointTrajectory, queue_size=1)
    headPub = rospy.Publisher('/hsrb/head_trajectory_controller/command', JointTrajectory, queue_size=1)

    # wait to establish connection between the controller
    while gripperPub.get_num_connections() == 0 and not rospy.is_shutdown():
        rospy.sleep(0.1)

    # wait to establish connection between the controller
    while headPub.get_num_connections() == 0 and not rospy.is_shutdown():
        rospy.sleep(0.1)

    # make sure the controller is running
    rospy.wait_for_service('/hsrb/controller_manager/list_controllers')
    list_controllers = rospy.ServiceProxy('/hsrb/controller_manager/list_controllers',
                                          controller_manager_msgs.srv.ListControllers)
    running = {}
    # Gripper controller never becomes available in the simulator, so we'll only check that atleast
    # two controllers are available. The gripper works in simulation regardless.
    while len(running.keys()) < 2 and not rospy.is_shutdown():
        rospy.sleep(0.1)
        for c in list_controllers().controller:
            if c.name in ['gripper_controller', 'head_trajectory_controller',
                          'arm_trajectory_controller'] and c.state == 'running':
                running[c.name] = True

    x = 0
    th = 0
    y = 0


    print(msg)
    print(vels(linear, angular), end="\r")
    while not rospy.is_shutdown():
        key = getKey(keyTranslator)
        if key in moveBindings.keys():
            x = linear * moveBindings[key][0]
            y = 0
            th = angular * moveBindings[key][1]
            publish_base_velocity(x, y, th)
        elif key in speedBindings.keys():
            linear = linear * speedBindings[key][0]
            angular = angular * speedBindings[key][1]
            print(vels(linear, angular), end="\r")
        elif key in strafeBindings.keys():
            x = linear * strafeBindings[key][0]
            y = linear * strafeBindings[key][1]
            th = 0
            publish_base_velocity(x, y, th)
        elif key in headBindings.keys():
            pan = 0.4 * headBindings[key][0] + latest_positions["head_pan_joint"]
            tilt = 0.2 * headBindings[key][1] + latest_positions["head_tilt_joint"]
            publish_head(pan, tilt)
        elif key in armBindings.keys():
            lift = 0.07 * armBindings[key][0] + latest_positions["arm_lift_joint"]
            flex = 0.4 * armBindings[key][1] + latest_positions["arm_flex_joint"]
            publish_arm(lift, flex)
        elif key in handBindings.keys():
            position = handBindings[key]
            publish_gripper(position)
        elif key == '1':
            move_to_pose(go_pose)
        elif key == '2':
            move_to_pose(look_right_photo_pose)
        elif key == '3':
            move_to_pose(look_right_from_above_photo_pose)
        elif key == '4':
            move_to_pose(look_ahead_photo_pose)
        elif key == '\x03':
            # Break on Control C
            break
        else:
            stop_all()

    stop_all()
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, original_settings)
